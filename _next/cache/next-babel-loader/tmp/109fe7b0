{"ast":null,"code":"\"use strict\";\n\nvar _reactJsxRuntime = require(\"react/jsx-runtime\");\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_1 = __importDefault(require(\"react\"));\n\nconst mobx_react_1 = require(\"mobx-react\");\n\nconst ToolBarStyles_1 = require(\"./ToolBarStyles\");\n\nconst category_1 = __importDefault(require(\"../../../bahra/Common/Category/category\"));\n\nconst cart_1 = __importDefault(require(\"../../../bahra/Common/Cart/cart\"));\n\nconst tag_1 = __importDefault(require(\"../../../bahra/Common/Tag/tag\"));\n\nconst artistsIcon_1 = __importDefault(require(\"../../../bahra/BahraIcons/DrawerIcon/artistsIcon/artistsIcon\"));\n\nconst eventsIcon_1 = __importDefault(require(\"../../../bahra/BahraIcons/DrawerIcon/eventsIcon/eventsIcon\"));\n\nconst blogsIcon_1 = __importDefault(require(\"../../../bahra/BahraIcons/DrawerIcon/blogsIcon/blogsIcon\"));\n\nconst SortByIcon_1 = require(\"../../../bahra/BahraIcons/ToolsBarIcon/SortByIcon\");\n\nconst FilterIcon_1 = require(\"../../../bahra/BahraIcons/ToolsBarIcon/FilterIcon\");\n\nconst lodash_1 = require(\"lodash\");\n\nconst i18n_1 = require(\"../../../../../i18n\");\n\nconst styles_1 = require(\"../../../../components/bahra/BahraIcons/ToolsBarIcon/styles\");\n\nvar ToolsBarisActive;\n\n(function (ToolsBarisActive) {\n  ToolsBarisActive[ToolsBarisActive[\"categoriesActive\"] = 0] = \"categoriesActive\";\n  ToolsBarisActive[ToolsBarisActive[\"tagsActive\"] = 1] = \"tagsActive\";\n  ToolsBarisActive[ToolsBarisActive[\"filterActive\"] = 2] = \"filterActive\";\n  ToolsBarisActive[ToolsBarisActive[\"cartActive\"] = 3] = \"cartActive\";\n  ToolsBarisActive[ToolsBarisActive[\"sortByActive\"] = 4] = \"sortByActive\";\n})(ToolsBarisActive || (ToolsBarisActive = {}));\n\nlet ToolsBar = class ToolsBar extends react_1.default.Component {\n  constructor(props) {\n    super(props);\n    this.wrapperRef = react_1.default.createRef();\n\n    this.handleClickOutside = event => {\n      const current = this.wrapperRef.current;\n\n      if (current && !current.contains(event.target)) {\n        this.toggletoolBarActive({\n          activeToolBar: null,\n          active: false\n        });\n      }\n    };\n\n    this.toggletoolBarActive = activeToolBar => {\n      try {\n        if (activeToolBar.categories !== null) {\n          if (!lodash_1.isEmpty(this.props.bahraContent.categories)) {\n            this.setState({\n              activeToolBar: {\n                categories: {\n                  id: this.props.bahraContent.categories,\n                  categoriesActive: true\n                }\n              }\n            });\n            this.setState({\n              active: true\n            });\n          }\n        }\n\n        if (activeToolBar.tags !== null) {\n          if (!lodash_1.isEmpty(this.props.bahraContent.tags)) {\n            this.setState({\n              activeToolBar: {\n                tags: {\n                  id: this.props.bahraContent.tags,\n                  tagsActive: true\n                }\n              }\n            });\n            this.setState({\n              active: true\n            });\n          }\n        }\n\n        if (activeToolBar.filter !== null) {\n          if (!lodash_1.isEmpty(this.props.bahraContent.filter)) {\n            this.setState({\n              active: true\n            });\n            this.setState({\n              activeToolBar: {\n                filter: {\n                  id: this.props.bahraContent.filter,\n                  filterActive: true\n                }\n              }\n            });\n          }\n        }\n\n        if (activeToolBar.sortBy !== null) {\n          if (!lodash_1.isEmpty(this.props.bahraContent.sortBy)) {\n            this.setState({\n              active: true\n            });\n            this.setState({\n              activeToolBar: {\n                sortBy: {\n                  id: this.props.bahraContent.sortBy,\n                  sortByActive: true\n                }\n              }\n            });\n          }\n        }\n      } catch (_a) {\n        e => console.error(e);\n      } finally {\n        e => console.error(e);\n      }\n    };\n\n    this.state = {\n      toolBarOpen: false,\n      isActive: null,\n      active: false,\n      categories: null,\n      tags: null,\n      cart: null,\n      activeToolBar: {\n        categories: {\n          id: null,\n          categoriesActive: false\n        },\n        tags: {\n          id: null,\n          tagsActive: false\n        },\n        filter: {\n          id: null,\n          filterActive: false\n        },\n        sortBy: {\n          id: null,\n          sortByActive: false\n        },\n        cart: {\n          id: null,\n          cartActive: false\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    () => {\n      if (lodash_1.isEmpty(this.state.activeToolBar) && this.props.toolBarOpen) {\n        this.toggletoolBarActive;\n      } else {\n        this.setState({\n          active: false\n        });\n        this.setState({\n          activeToolBar: null\n        });\n      }\n    };\n\n    document.addEventListener('click', this.handleClickOutside, false);\n    document.addEventListener('touchstart', this.handleClickOutside, false);\n  }\n\n  componentWillUnmount() {\n    document.addEventListener('click', this.handleClickOutside, false);\n    document.addEventListener('touchstart', this.handleClickOutside, false);\n  }\n\n  render() {\n    console.log('ToolsBarProps', this.props);\n    const isActive = this.state.isActive;\n    const {\n      toolBarOpen,\n      t,\n      currentLanguage,\n      currentUrl\n    } = this.props;\n    const {\n      cart,\n      categories,\n      tags,\n      active\n    } = this.state;\n    debugger;\n    console.log('ToolsBarstarte', this.state, this.props, active, currentLanguage);\n    return /*#__PURE__*/_reactJsxRuntime.jsxs(_reactJsxRuntime.Fragment, {\n      children: [currentUrl.includes('shop') || currentUrl.includes('products') ? /*#__PURE__*/_reactJsxRuntime.jsx(ToolBarStyles_1.StyledTopToolBarIcons, {\n        onClick: () => console.log(''),\n        \"data-active\": isActive,\n        children: /*#__PURE__*/_reactJsxRuntime.jsx(cart_1.default, {\n          cart: cart,\n          active: active,\n          t: t,\n          toolBarOpen: toolBarOpen\n        })\n      }) : null, currentUrl.includes('blog' || 'blogs') ? /*#__PURE__*/_reactJsxRuntime.jsx(ToolBarStyles_1.StyledTopToolBarIcons, {\n        children: /*#__PURE__*/_reactJsxRuntime.jsx(blogsIcon_1.default, {\n          toolBarOpen: toolBarOpen\n        })\n      }) : null, currentUrl.includes('artist' || 'artists') ? /*#__PURE__*/_reactJsxRuntime.jsx(ToolBarStyles_1.StyledTopToolBarIcons, {\n        children: /*#__PURE__*/_reactJsxRuntime.jsx(artistsIcon_1.default, {\n          toolBarOpen: toolBarOpen\n        })\n      }) : null, currentUrl.includes('event' || 'events') ? /*#__PURE__*/_reactJsxRuntime.jsx(ToolBarStyles_1.StyledTopToolBarIcons, {\n        children: /*#__PURE__*/_reactJsxRuntime.jsx(eventsIcon_1.default, {\n          toolBarOpen: toolBarOpen\n        })\n      }) : null, toolBarOpen ? /*#__PURE__*/_reactJsxRuntime.jsx(_reactJsxRuntime.Fragment, {\n        children: /*#__PURE__*/_reactJsxRuntime.jsxs(ToolBarStyles_1.StyledToolBar, {\n          active: this.state.active,\n          open: toolBarOpen,\n          children: [/*#__PURE__*/_reactJsxRuntime.jsx(\"div\", {\n            children: /*#__PURE__*/_reactJsxRuntime.jsx(styles_1.StyledToolBarIcons, {\n              open: toolBarOpen,\n              active: active,\n              ref: this.wrapperRef,\n              onClick: () => this.toggletoolBarActive({\n                activeToolBar: categories,\n                active: true\n              }),\n              \"data-active\": isActive,\n              children: /*#__PURE__*/_reactJsxRuntime.jsx(category_1.default, {\n                categories: categories,\n                isActive: active\n              })\n            })\n          }), /*#__PURE__*/_reactJsxRuntime.jsx(\"div\", {\n            children: /*#__PURE__*/_reactJsxRuntime.jsx(styles_1.StyledToolBarIcons, {\n              open: toolBarOpen,\n              active: active,\n              ref: this.wrapperRef,\n              onClick: () => this.toggletoolBarActive({\n                activeToolBar: lodash_1.sortBy,\n                active: true\n              }),\n              \"data-active\": isActive,\n              children: /*#__PURE__*/_reactJsxRuntime.jsx(SortByIcon_1.StyledIconSortBy, {\n                t: t\n              })\n            })\n          }), /*#__PURE__*/_reactJsxRuntime.jsx(\"div\", {\n            children: /*#__PURE__*/_reactJsxRuntime.jsx(styles_1.StyledToolBarIcons, {\n              open: toolBarOpen,\n              active: active,\n              ref: this.wrapperRef,\n              onClick: () => this.toggletoolBarActive({\n                activeToolBar: lodash_1.filter,\n                active: true\n              }),\n              \"data-active\": isActive,\n              children: /*#__PURE__*/_reactJsxRuntime.jsx(FilterIcon_1.StyledIconFilter, {\n                t: t\n              })\n            })\n          }), /*#__PURE__*/_reactJsxRuntime.jsx(\"div\", {\n            children: /*#__PURE__*/_reactJsxRuntime.jsx(styles_1.StyledToolBarIcons, {\n              open: toolBarOpen,\n              active: active,\n              ref: this.wrapperRef,\n              onClick: () => this.toggletoolBarActive({\n                activeToolBar: tags,\n                active: true\n              }),\n              \"data-active\": isActive,\n              children: /*#__PURE__*/_reactJsxRuntime.jsx(tag_1.default, {\n                isActive: active,\n                tags: tags\n              })\n            })\n          })]\n        })\n      }) : null]\n    });\n  }\n\n};\nToolsBar = __decorate([mobx_react_1.inject('store'), mobx_react_1.observer], ToolsBar);\nexports.default = i18n_1.withTranslation(\"common\")(ToolsBar);","map":null,"metadata":{},"sourceType":"script"}