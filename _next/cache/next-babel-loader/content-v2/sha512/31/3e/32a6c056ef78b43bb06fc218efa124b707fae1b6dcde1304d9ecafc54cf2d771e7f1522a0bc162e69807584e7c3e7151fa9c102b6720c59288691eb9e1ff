{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CartStore = void 0;\n\nvar mobx_1 = require(\"mobx\");\n\nvar mobx_state_tree_1 = require(\"mobx-state-tree\");\n\nvar productStore_1 = require(\"./productStore\");\n\nvar CartEntry = mobx_state_tree_1.types.model('CartEntry', {\n  quantity: 0,\n  prodoct: mobx_state_tree_1.types.reference(productStore_1.Prodoct)\n}).views(function (self) {\n  return {\n    get price() {\n      return self.prodoct.price * self.quantity;\n    },\n\n    get isValidProdoct() {\n      return self.prodoct.isAvailable;\n    }\n\n  };\n}).actions(function (self) {\n  return {\n    increaseQuantity: function increaseQuantity(number) {\n      self.quantity += number;\n    },\n    setQuantity: function setQuantity(number) {\n      self.quantity = number;\n    },\n    remove: function remove() {\n      mobx_state_tree_1.getParent(self, 2).remove(self);\n    }\n  };\n});\nexports.CartStore = mobx_state_tree_1.types.model('CartStore', {\n  entries: mobx_state_tree_1.types.array(CartEntry)\n}).views(function (self) {\n  return {\n    get shop() {\n      return mobx_state_tree_1.getParent(self);\n    },\n\n    get subTotal() {\n      return self.entries.reduce(function (sum, e) {\n        return sum + e.price;\n      }, 0);\n    },\n\n    get hasDiscount() {\n      return self.subTotal >= 100;\n    },\n\n    get discount() {\n      return self.subTotal * (self.hasDiscount ? 0.1 : 0);\n    },\n\n    get total() {\n      return self.subTotal - self.discount;\n    },\n\n    get canCheckout() {\n      return self.entries.length > 0 && self.entries.every(function (entry) {\n        return entry.quantity > 0 && entry.isValidProdoct;\n      });\n    }\n\n  };\n}).actions(function (self) {\n  return {\n    afterAttach: function afterAttach() {\n      if (true && window.localStorage) {\n        mobx_1.when(function () {\n          return !self.shop.isLoading;\n        }, function () {\n          self.readFromLocalStorage();\n          mobx_1.reaction(function () {\n            return mobx_state_tree_1.getSnapshot(self);\n          }, function (json) {\n            window.localStorage.setItem('cart', JSON.stringify(json));\n          });\n        });\n      }\n    },\n    addProdoct: function addProdoct(prodoct) {\n      var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var notify = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var entry = self.entries.find(function (entry) {\n        return entry.prodoct === prodoct;\n      });\n\n      if (!entry) {\n        self.entries.push({\n          prodoct: prodoct\n        });\n        entry = self.entries[self.entries.length - 1];\n      }\n\n      entry.increaseQuantity(quantity);\n\n      if (notify) {\n        self.shop.alert('Added to cart');\n      }\n    },\n    remove: function remove(prodoct) {\n      mobx_state_tree_1.destroy(prodoct);\n    },\n    checkout: function checkout(self) {\n      var total = self.total;\n      self.clear();\n      self.shop.alert(\"Bought prodocts for \".concat(total, \" \\u20AC !\"));\n    },\n    clear: function clear() {\n      self.entries.clear();\n    },\n    readFromLocalStorage: function readFromLocalStorage() {\n      var cartData = window.localStorage.getItem('cart');\n\n      if (cartData) {\n        mobx_state_tree_1.applySnapshot(self, JSON.parse(cartData));\n      }\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"script"}