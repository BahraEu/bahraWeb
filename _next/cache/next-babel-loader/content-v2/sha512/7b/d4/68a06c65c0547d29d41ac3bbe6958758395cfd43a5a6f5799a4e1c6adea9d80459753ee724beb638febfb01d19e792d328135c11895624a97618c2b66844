{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tint = exports.hexa = void 0;\n\n__exportStar(require(\"./helpers\"), exports);\n\nconst hexa = (hex, alpha) => {\n  const r = parseInt(hex.slice(1, 3), 16);\n  const g = parseInt(hex.slice(3, 5), 16);\n  const b = parseInt(hex.slice(5, 7), 16);\n\n  if (alpha >= 0) {\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n  }\n\n  return `rgb(${r}, ${g}, ${b})`;\n};\n\nexports.hexa = hexa;\n\nconst tint = (hex, amount) => {\n  let R = parseInt(hex.substring(1, 3), 16);\n  let G = parseInt(hex.substring(3, 5), 16);\n  let B = parseInt(hex.substring(5, 7), 16);\n\n  const getSingle = number => // @ts-ignore\n  parseInt(number * (100 + amount) / 100, 10);\n\n  R = getSingle(R);\n  G = getSingle(G);\n  B = getSingle(B);\n  R = R < 255 ? R : 255;\n  G = G < 255 ? G : 255;\n  B = B < 255 ? B : 255;\n\n  const getDouble = number => number.toString(16).length === 1 ? `0${number.toString(16)}` : number.toString(16);\n\n  const RR = getDouble(R);\n  const GG = getDouble(G);\n  const BB = getDouble(B);\n  return `#${RR}${GG}${BB}`;\n};\n\nexports.tint = tint;","map":null,"metadata":{},"sourceType":"script"}