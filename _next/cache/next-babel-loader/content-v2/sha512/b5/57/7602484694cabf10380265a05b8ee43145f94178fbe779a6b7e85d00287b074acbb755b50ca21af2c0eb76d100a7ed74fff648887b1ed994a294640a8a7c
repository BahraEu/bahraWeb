{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useStore = exports.initializeStore = void 0;\n\nconst react_1 = require(\"react\");\n\nconst mobx_state_tree_1 = require(\"mobx-state-tree\");\n\nconst userStore_1 = require(\"./userStore\");\n\nconst shopStore_1 = require(\"./shopStore\");\n\nlet store;\nconst Store = mobx_state_tree_1.types.model('RootStore', {\n  identifier: mobx_state_tree_1.types.optional(mobx_state_tree_1.types.identifier, 'RootStore'),\n  userStore: mobx_state_tree_1.types.optional(userStore_1.UserStore, () => userStore_1.UserStore.create({\n    users: {}\n  })),\n  shopStore: mobx_state_tree_1.types.optional(shopStore_1.ShopStore, () => shopStore_1.ShopStore.create({}))\n}).actions(self => ({\n  afterCreate() {\n    self.shopStore.prodocts;\n  },\n\n  async save() {\n    try {\n      const transformedSnapshot = mobx_state_tree_1.getSnapshot(self);\n      const json = JSON.stringify(transformedSnapshot);\n      await localStorage.setItem('appStatePersistenceKey', json);\n    } catch (err) {\n      console.warn('unexpected error ' + err);\n    }\n  }\n\n}));\n\nfunction initializeStore(snapshot = null) {\n  const _store = store !== null && store !== void 0 ? store : Store.create({\n    userStore: {}\n  }); // If your page has Next.js data fetching methods that use a Mobx store, it will\n  // get hydrated here, check `pages/ssg.tsx` and `pages/ssr.tsx` for more details\n\n\n  if (snapshot) {\n    console.log('snapshot');\n    mobx_state_tree_1.applySnapshot(_store, snapshot);\n  } // For SSG and SSR always create a new store\n\n\n  if (true) return _store; // Create the store once in the client\n\n  console.log('Create the store once in the client');\n  if (!store) store = _store;\n  return store;\n}\n\nexports.initializeStore = initializeStore;\n\nfunction useStore(initialState) {\n  const store = react_1.useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n}\n\nexports.useStore = useStore;","map":null,"metadata":{},"sourceType":"script"}