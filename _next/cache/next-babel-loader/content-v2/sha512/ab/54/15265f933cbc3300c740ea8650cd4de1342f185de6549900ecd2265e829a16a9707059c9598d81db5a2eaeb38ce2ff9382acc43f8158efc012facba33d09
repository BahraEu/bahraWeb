{"ast":null,"code":"\"use strict\";\n\nvar _reactJsxDevRuntime = require(\"react/jsx-dev-runtime\");\n\nvar _jsxFileName = \"/home/rami/BHARA/BahraPro/BahraPro/src/services/apollo/with-apollo.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_1 = __importDefault(require(\"react\"));\n\nconst head_1 = __importDefault(require(\"next/head\"));\n\nconst react_hooks_1 = require(\"@apollo/react-hooks\");\n\nconst client_1 = require(\"@apollo/client\");\n\nlet globalApolloClient;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n */\n\nfunction withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = _a => {\n    var {\n      apolloClient,\n      apolloState\n    } = _a,\n        pageProps = __rest(_a, [\"apolloClient\", \"apolloState\"]);\n\n    const client = apolloClient || initApolloClient();\n    return /*#__PURE__*/_reactJsxDevRuntime.jsxDEV(react_hooks_1.ApolloProvider, {\n      client: client,\n      children: /*#__PURE__*/_reactJsxDevRuntime.jsxDEV(PageComponent, _objectSpread({}, pageProps), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this);\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree\n      } = ctx; // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n\n      const apolloClient = ctx.apolloClient = initApolloClient(); // Run wrapped getInitialProps methods\n\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } // Only on the server:\n\n\n      if (true) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        } // Only if ssr is enabled\n\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await Promise.resolve().then(() => __importStar(require('@apollo/react-ssr')));\n            await getDataFromTree( /*#__PURE__*/_reactJsxDevRuntime.jsxDEV(AppTree, {\n              pageProps: Object.assign(Object.assign({}, pageProps), {\n                apolloClient\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 47\n            }, this));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          } // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n\n\n          head_1.default.rewind();\n        }\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apolloClient.cache.extract();\n      return Object.assign(Object.assign({}, pageProps), {\n        apolloState\n      });\n    };\n  }\n\n  return WithApollo;\n}\n\nexports.default = withApollo;\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState);\n  }\n\n  return globalApolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\n\nfunction createApolloClient(initialState = {}) {\n  const ssrMode = true;\n  const cache = new client_1.InMemoryCache().restore(initialState); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new client_1.ApolloClient({\n    ssrMode,\n    link: createIsomorphLink(),\n    cache\n  });\n}\n\nfunction createIsomorphLink() {\n  if (true) {\n    const {\n      SchemaLink\n    } = require('apollo-link-schema');\n\n    const schema = require(\"../../../server/schema/schema\").default;\n\n    return new SchemaLink({\n      schema\n    });\n  } else {\n    const {\n      HttpLink\n    } = require('apollo-link-http');\n\n    return new HttpLink({\n      uri: '/graphql',\n      credentials: 'same-origin'\n    });\n  }\n}","map":{"version":3,"sources":["../../../../src/services/apollo/with-apollo.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = __importDefault(require(\"react\"));\nconst head_1 = __importDefault(require(\"next/head\"));\nconst react_hooks_1 = require(\"@apollo/react-hooks\");\nconst client_1 = require(\"@apollo/client\");\nlet globalApolloClient;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n */\nfunction withApollo(PageComponent, { ssr = true } = {}) {\n    const WithApollo = (_a) => {\n        var { apolloClient, apolloState } = _a, pageProps = __rest(_a, [\"apolloClient\", \"apolloState\"]);\n        const client = apolloClient || initApolloClient();\n        return (<react_hooks_1.ApolloProvider client={client}>\n                <PageComponent {...pageProps}/>\n            </react_hooks_1.ApolloProvider>);\n    };\n    // Set the correct displayName in development\n    if (process.env.NODE_ENV !== 'production') {\n        const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n        if (displayName === 'App') {\n            console.warn('This withApollo HOC only works with PageComponents.');\n        }\n        WithApollo.displayName = `withApollo(${displayName})`;\n    }\n    if (ssr || PageComponent.getInitialProps) {\n        WithApollo.getInitialProps = async (ctx) => {\n            const { AppTree } = ctx;\n            // Initialize ApolloClient, add it to the ctx object so\n            // we can use it in `PageComponent.getInitialProp`.\n            const apolloClient = (ctx.apolloClient = initApolloClient());\n            // Run wrapped getInitialProps methods\n            let pageProps = {};\n            if (PageComponent.getInitialProps) {\n                pageProps = await PageComponent.getInitialProps(ctx);\n            }\n            // Only on the server:\n            if (typeof window === 'undefined') {\n                // When redirecting, the response is finished.\n                // No point in continuing to render\n                if (ctx.res && ctx.res.finished) {\n                    return pageProps;\n                }\n                // Only if ssr is enabled\n                if (ssr) {\n                    try {\n                        // Run all GraphQL queries\n                        const { getDataFromTree } = await Promise.resolve().then(() => __importStar(require('@apollo/react-ssr')));\n                        await getDataFromTree(<AppTree pageProps={Object.assign(Object.assign({}, pageProps), { apolloClient })}/>);\n                    }\n                    catch (error) {\n                        // Prevent Apollo Client GraphQL errors from crashing SSR.\n                        // Handle them in components via the data.error prop:\n                        // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                        console.error('Error while running `getDataFromTree`', error);\n                    }\n                    // getDataFromTree does not call componentWillUnmount\n                    // head side effect therefore need to be cleared manually\n                    head_1.default.rewind();\n                }\n            }\n            // Extract query data from the Apollo store\n            const apolloState = apolloClient.cache.extract();\n            return Object.assign(Object.assign({}, pageProps), { apolloState });\n        };\n    }\n    return WithApollo;\n}\nexports.default = withApollo;\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(initialState) {\n    // Make sure to create a new client for every server-side request so that data\n    // isn't shared between connections (which would be bad)\n    if (typeof window === 'undefined') {\n        return createApolloClient(initialState);\n    }\n    // Reuse client on the client-side\n    if (!globalApolloClient) {\n        globalApolloClient = createApolloClient(initialState);\n    }\n    return globalApolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(initialState = {}) {\n    const ssrMode = typeof window === 'undefined';\n    const cache = new client_1.InMemoryCache().restore(initialState);\n    // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n    return new client_1.ApolloClient({\n        ssrMode,\n        link: createIsomorphLink(),\n        cache,\n    });\n}\nfunction createIsomorphLink() {\n    if (typeof window === 'undefined') {\n        const { SchemaLink } = require('apollo-link-schema');\n        const schema = require('../../../server/schema/schema').default;\n        return new SchemaLink({ schema });\n    }\n    else {\n        const { HttpLink } = require('apollo-link-http');\n        return new HttpLink({\n            uri: '/graphql',\n            credentials: 'same-origin',\n        });\n    }\n}\n//# sourceMappingURL=with-apollo.jsx.map"]},"metadata":{},"sourceType":"script"}