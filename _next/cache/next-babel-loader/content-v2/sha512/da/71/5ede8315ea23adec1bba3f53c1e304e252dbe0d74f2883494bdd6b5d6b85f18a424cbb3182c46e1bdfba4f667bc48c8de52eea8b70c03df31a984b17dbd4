{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CartStore = void 0;\n\nconst mobx_1 = require(\"mobx\");\n\nconst mobx_state_tree_1 = require(\"mobx-state-tree\");\n\nconst productStore_1 = require(\"./productStore\");\n\nconst CartEntry = mobx_state_tree_1.types.model('CartEntry', {\n  quantity: 0,\n  prodoct: mobx_state_tree_1.types.reference(productStore_1.Prodoct)\n}).views(self => ({\n  get price() {\n    return self.prodoct.price * self.quantity;\n  },\n\n  get isValidProdoct() {\n    return self.prodoct.isAvailable;\n  }\n\n})).actions(self => ({\n  increaseQuantity(number) {\n    self.quantity += number;\n  },\n\n  setQuantity(number) {\n    self.quantity = number;\n  },\n\n  remove() {\n    mobx_state_tree_1.getParent(self, 2).remove(self);\n  }\n\n}));\nexports.CartStore = mobx_state_tree_1.types.model('CartStore', {\n  entries: mobx_state_tree_1.types.array(CartEntry)\n}).views(self => ({\n  get shop() {\n    return mobx_state_tree_1.getParent(self);\n  },\n\n  get subTotal() {\n    return self.entries.reduce((sum, e) => sum + e.price, 0);\n  },\n\n  get hasDiscount() {\n    return self.subTotal >= 100;\n  },\n\n  get discount() {\n    return self.subTotal * (self.hasDiscount ? 0.1 : 0);\n  },\n\n  get total() {\n    return self.subTotal - self.discount;\n  },\n\n  get canCheckout() {\n    return self.entries.length > 0 && self.entries.every(entry => entry.quantity > 0 && entry.isValidProdoct);\n  }\n\n})).actions(self => ({\n  afterAttach() {\n    if (false && window.localStorage) {\n      mobx_1.when(() => !self.shop.isLoading, () => {\n        self.readFromLocalStorage();\n        mobx_1.reaction(() => mobx_state_tree_1.getSnapshot(self), json => {\n          window.localStorage.setItem('cart', JSON.stringify(json));\n        });\n      });\n    }\n  },\n\n  addProdoct(prodoct, quantity = 1, notify = true) {\n    let entry = self.entries.find(entry => entry.prodoct === prodoct);\n\n    if (!entry) {\n      self.entries.push({\n        prodoct: prodoct\n      });\n      entry = self.entries[self.entries.length - 1];\n    }\n\n    entry.increaseQuantity(quantity);\n\n    if (notify) {\n      self.shop.alert('Added to cart');\n    }\n  },\n\n  remove(prodoct) {\n    mobx_state_tree_1.destroy(prodoct);\n  },\n\n  checkout(self) {\n    const total = self.total;\n    self.clear();\n    self.shop.alert(`Bought prodocts for ${total} â‚¬ !`);\n  },\n\n  clear() {\n    self.entries.clear();\n  },\n\n  readFromLocalStorage() {\n    const cartData = window.localStorage.getItem('cart');\n\n    if (cartData) {\n      mobx_state_tree_1.applySnapshot(self, JSON.parse(cartData));\n    }\n  }\n\n}));","map":null,"metadata":{},"sourceType":"script"}