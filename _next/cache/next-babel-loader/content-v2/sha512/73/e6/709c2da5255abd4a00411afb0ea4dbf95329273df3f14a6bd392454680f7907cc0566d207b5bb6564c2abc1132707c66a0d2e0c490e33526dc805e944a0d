{"ast":null,"code":"\"use strict\";\n\nvar _reactJsxRuntime = require(\"react/jsx-runtime\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst PropTypes = __importStar(require(\"prop-types\"));\n\nconst React = __importStar(require(\"react\"));\n\nconst react_apollo_1 = require(\"react-apollo\");\n\nconst head_1 = __importDefault(require(\"next/head\"));\n\nconst initApollo_1 = __importDefault(require(\"./initApollo\"));\n\nconst parseCookies_1 = __importDefault(require(\"../../utilty/parseCookies\"));\n\nexports.default = App => {\n  // let disableStylesGeneration = true;\n  var _a;\n\n  App.displayName = 'BAHRA App';\n  return _a = class WithData extends React.Component {\n    constructor(props) {\n      super(props);\n      this.pageContext = null; // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n\n      this.apolloClient = initApollo_1.default(props.apolloState, {\n        getToken: () => {\n          let WP_refreshToken = parseCookies_1.default().refreshToken;\n          let WP_authToken = parseCookies_1.default().authToken;\n          return {\n            WP_authToken,\n            WP_refreshToken\n          };\n        }\n      });\n    }\n\n    static async getInitialProps(ctx) {\n      const {\n        Component,\n        router,\n        req,\n        res\n      } = ctx;\n      const apollo = initApollo_1.default({}, {\n        getToken: () => {\n          let refreshToken = parseCookies_1.default(req).refreshToken;\n          console.log('authToken', refreshToken);\n          let authToken = parseCookies_1.default(req).authToken;\n          console.log('authToken', authToken);\n          return {\n            authToken,\n            refreshToken\n          };\n        }\n      });\n      ctx.apolloClient = apollo;\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      }\n\n      if (res && res.finished) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        return {};\n      }\n\n      if (typeof 'process' !== 'undefined' && process && process.versions && Boolean(process.versions.node)) {\n        // Run all graphql queries in the component tree\n        // and extract the resulting data\n        try {\n          //  disableStylesGeneration = true;\n          // Run all GraphQL queries\n          await react_apollo_1.getDataFromTree( /*#__PURE__*/_reactJsxRuntime.jsx(App, _objectSpread(_objectSpread({}, appProps), {}, {\n            Component: Component,\n            router: router,\n            apolloClient: apollo\n          })));\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          // tslint:disable-next-line:no-console\n          console.error('Error while running `getDataFromTree`', error);\n        } // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        head_1.default.rewind();\n      } // Extract query data from the Apollo's store\n\n\n      const apolloState = apollo.cache.extract();\n      return Object.assign(Object.assign({}, appProps), {\n        apolloState\n      });\n    }\n\n    render() {\n      return /*#__PURE__*/_reactJsxRuntime.jsx(App, _objectSpread(_objectSpread({}, this.props), {}, {\n        apolloClient: this.apolloClient\n      }));\n    }\n\n  }, _a.displayName = `WithData(${App.displayName})`, _a.propTypes = {\n    apolloState: PropTypes.object.isRequired\n  }, _a;\n};","map":null,"metadata":{},"sourceType":"script"}