{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProdoctStore = exports.Prodoct = void 0;\n\nconst mobx_1 = require(\"mobx\");\n\nconst mobx_state_tree_1 = require(\"mobx-state-tree\");\n\nexports.Prodoct = mobx_state_tree_1.types.model('Prodoct', {\n  id: mobx_state_tree_1.types.identifier,\n  name: mobx_state_tree_1.types.string,\n  author: mobx_state_tree_1.types.string,\n  series_t: mobx_state_tree_1.types.optional(mobx_state_tree_1.types.string, ''),\n  sequence_i: mobx_state_tree_1.types.number,\n  genre_s: mobx_state_tree_1.types.string,\n  pages_i: mobx_state_tree_1.types.number,\n  price: mobx_state_tree_1.types.number,\n  isAvailable: true\n});\nexports.ProdoctStore = mobx_state_tree_1.types.model('ProdoctStore', {\n  isLoading: true,\n  prodocts: mobx_state_tree_1.types.map(exports.Prodoct)\n}).views(self => ({\n  get shop() {\n    return mobx_state_tree_1.getParent(self);\n  },\n\n  get sortedAvailableProdocts() {\n    return sortProdocts(mobx_1.values(self.prodocts));\n  }\n\n})).actions(self => {\n  function markLoading(loading) {\n    self.isLoading = loading;\n  }\n\n  function updateProdocts(json) {\n    mobx_1.values(self.prodocts).forEach(product => product.isAvailable = false);\n    json.forEach(function (prodoctJson) {\n      self.prodocts.put(prodoctJson);\n      self.prodocts.get(prodoctJson.id).isAvailable = true;\n    });\n  }\n\n  const loadProdocts = mobx_state_tree_1.flow(function* loadProdocts(json) {\n    try {\n      updateProdocts(json);\n      markLoading(false);\n    } catch (err) {\n      console.error('Failed to load prodocts ', err);\n    }\n  });\n  return {\n    updateProdocts,\n    loadProdocts\n  };\n});\n\nfunction sortProdocts(prodocts) {\n  return prodocts.filter(b => b.isAvailable).sort((a, b) => a.name > b.name ? 1 : a.name === b.name ? 0 : -1);\n}","map":null,"metadata":{},"sourceType":"script"}