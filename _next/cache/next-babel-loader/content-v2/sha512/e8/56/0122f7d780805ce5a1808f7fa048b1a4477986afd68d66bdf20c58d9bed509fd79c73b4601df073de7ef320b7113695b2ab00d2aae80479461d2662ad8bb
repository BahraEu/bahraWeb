{"ast":null,"code":"\"use strict\"; // tslint:disable: no-console\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst apollo_client_1 = require(\"apollo-client\");\n\nconst apollo_link_1 = require(\"apollo-link\");\n\nconst apollo_link_context_1 = require(\"apollo-link-context\");\n\nconst apollo_link_error_1 = require(\"apollo-link-error\");\n\nconst apollo_link_http_1 = require(\"apollo-link-http\");\n\nconst apollo_link_logger_1 = __importDefault(require(\"apollo-link-logger\"));\n\nconst createCache_1 = __importDefault(require(\"./createCache\"));\n\nconst config_1 = __importDefault(require(\"../../../config/config\")); //import { WebSocketLink } from \"@apollo/client/link/ws\";\n\n\nconst helpers_1 = require(\"../../utilty/helpers\");\n\nconst parseCookies_1 = __importStar(require(\"../../utilty/parseCookies\"));\n\nconst lodash_1 = require(\"lodash\");\n\nconst link = apollo_link_1.from([// Log queries to console\n...(config_1.default.DEV ? [apollo_link_logger_1.default] : []), // Create Error linking\napollo_link_error_1.onError(({\n  graphQLErrors,\n  networkError\n}) => {\n  if (graphQLErrors) {\n    graphQLErrors.map(({\n      message,\n      locations,\n      path\n    }) => {\n      console.error(`\\n\\n[GraphQL error]: ${message} \\n location: ${JSON.stringify(locations, null, 2)} \\n path: ${path}\\n\\n`);\n    });\n  }\n\n  if (networkError) {\n    console.error(`[Network error]: ${JSON.stringify(networkError, null, 2)}`);\n  }\n}), new apollo_link_http_1.HttpLink({\n  credentials: 'same-origin',\n  useGETForQueries: false,\n  uri: 'https://bahra.eu/admin/index.php?graphql'\n})]);\n\nconst authLink = getToken => apollo_link_context_1.setContext((_, {\n  headers\n}) => {\n  const WP_tokens = getToken();\n  let refreshToken = parseCookies_1.default().refreshToken;\n  const IsTokenExpired = helpers_1.checkTokenIsExpired(WP_tokens.WP_authToken);\n  let token = WP_tokens.WP_authToken;\n\n  if (!lodash_1.isEmpty(token)) {\n    return {\n      headers\n    };\n  }\n\n  if (!IsTokenExpired) {\n    return createHeaders(token, headers);\n  } else {\n    try {\n      parseCookies_1.removeMapInCookie(['authToken'], token);\n      const {\n        token: refreshedAccessToken\n      } = WP_tokens.WP_refreshTokens;\n\n      if (!refreshedAccessToken) {\n        helpers_1.checkTokenIsExpired(refreshToken);\n      } else {\n        throw new Error();\n      }\n\n      return createHeaders(refreshedAccessToken, headers);\n    } catch (error) {\n      return {\n        headers\n      };\n    }\n  }\n});\n\nfunction createHeaders(token, oldHeaders) {\n  return {\n    headers: Object.assign({\n      Authorization: `Bearer ${token}`\n    }, oldHeaders)\n  };\n}\n\nconst create = (initialState, {\n  getToken\n}) => new apollo_client_1.ApolloClient({\n  cache: createCache_1.default.restore(initialState || {}),\n  connectToDevTools: true,\n  link: authLink(getToken).concat(link),\n  queryDeduplication: true,\n  ssrMode: Boolean(typeof 'process' !== 'undefined' && process && process.versions && Boolean(process.versions.node))\n});\n\nexports.default = create;","map":null,"metadata":{},"sourceType":"script"}