{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getUser = exports.isUserValidated = exports.isEmpty = void 0;\n\nconst config_1 = __importDefault(require(\"../../config/config\"));\n\nconst parseCookies_1 = __importDefault(require(\"./parseCookies\"));\n\nconst _1 = require(\".\");\n\nconst wp_user_1 = require(\"../graphql/queries/wp-user\"); // import { User } from '../types/User';\n\n/**\n * Returns true if the value is undefined/null/empty object/empty string.\n *\n * @param value\n * @return {boolean}\n */\n\n\nconst isEmpty = value => value === undefined || value === null || typeof value === 'object' && Object.keys(value).length === 0 || typeof value === 'string' && value.trim().length === 0;\n\nexports.isEmpty = isEmpty;\n/**\n * Check if user is logged in.\n *\n * @return {object} Auth Object containing token and user data, false on failure.\n */\n\nconst isUserValidated = () => {\n  if (!exports.isEmpty) {\n    let authTokenData = _1.isServer ? parseCookies_1.default().authToken : localStorage.getItem(config_1.default.WP_authToken);\n    let userID = _1.isServer ? parseCookies_1.default().userID : localStorage.getItem(config_1.default.userID);\n    let userLoggedInData = {};\n\n    if (!exports.isEmpty(authTokenData)) {\n      authTokenData = JSON.parse(authTokenData);\n      userID = JSON.parse(userID);\n\n      if (!exports.isEmpty(authTokenData)) {\n        userLoggedInData = {\n          authTokenData,\n          userID\n        };\n      }\n    }\n\n    return userLoggedInData;\n  } else {\n    let userLoggedInData = {};\n    let authTokenData = _1.isServer ? parseCookies_1.default().authToken : parseCookies_1.default().authToken;\n    let userID = _1.isServer ? parseCookies_1.default().userID : parseCookies_1.default().userID;\n\n    if (!exports.isEmpty(authTokenData)) {\n      authTokenData = JSON.parse(authTokenData);\n      userID = JSON.parse(userID);\n\n      if (!exports.isEmpty(authTokenData)) {\n        userLoggedInData = {\n          authTokenData,\n          userID\n        };\n      }\n\n      return userLoggedInData;\n    }\n  }\n};\n\nexports.isUserValidated = isUserValidated;\n/**\n * Logout the user.\n *\n * @param {string} urlToRedirect URL where user needs to be redirected after logout.\n *\n * @return {void}\n */\n\nconst getUser = async (client, userID) => {\n  await client.query({\n    query: wp_user_1.WP_USER,\n    variables: {\n      id: userID\n    }\n  }).then(async data => {\n    console.log('ddddddddddddddddddddddddddddd', data);\n    const wpUser = data.data.user;\n    const loading = data.loading;\n    console.log('wpUser', wpUser, loading);\n\n    if (!exports.isEmpty(wpUser)) {//   await userStore.createUser(wpUser)\n    }\n\n    return {\n      wpUser,\n      loading\n    };\n  }).catch(err => console.error(err));\n};\n\nexports.getUser = getUser; // export const getUsers = async(client)=>\n//  await client.query({query:GET_ALL_WP_USERS}).then( async(data) => {\n//    const wpUsers=!isEmpty(data.users) ?data.users.nodes:null\n//    console.log('ddddddddddddddddddddddddddddd wpUsers',data.data.users.nodes,wpUsers)\n// return wpUsers\n//  }).catch((err)=>console.error(err)\n//  )","map":null,"metadata":{},"sourceType":"script"}